## Load the data ##
library(TMB)
precompile()
library(geostatsp)
library(aghq)
library(tmbstan)
library(tidyverse)
library(spatstat)
library(spatial)
library(sp)
library(sf)
library(maptools)
library(raster)
library(fields)
library(viridis)

v_acs <- read_csv('data/v7acs_GC.csv')

win <- owin(c(0, 4300), c(0, 4300))

v7_ppp <- as.ppp(v_acs[,3:4], W = win)
GP_sp <- as.SpatialPoints.ppp(v7_ppp)
GP_sf <- st_as_sf(GP_sp)

v7_grid <- st_make_grid(GP_sf, n = c(50, 50), what = 'polygons') %>% 
  st_as_sf() %>% 
  mutate(count = lengths(st_intersects(., GP_sf)))

plot(v7_grid)

# Set the resolution for the spatial interpolations:
# The results shown in the paper use:
# reslist <- list(nrow = 200,ncol = 400)
# but this takes a couple hours. Here I set:

# globalpath <- "/storage/phd/projects/aghq-softwarepaper/paper/"
# savepath <- paste0(globalpath,"data/")
savestamp <- "20220211-v1"
# plotpath <- paste0(globalpath,"figures/loaloazip/")
globalpath <- getwd()
plotpath <- file.path(globalpath,"LGCP_no_cov")
if (!dir.exists(plotpath)) dir.create(plotpath)
savepath <- plotpath

file.copy(system.file('LGCP_no_cov.cpp',package='aghq'),globalpath)

# Compile TMB template-- only need to do once
compile(file.path("src/LGCP_no_cov.cpp"))
dyn.load(dynlib(file.path(globalpath,"src/LGCP_no_cov")))


# Flags, which analysis to do?
doaghq <- TRUE
dopostsamplingaghq <- TRUE

# Initialize time variables
aghqtime <- 0
aghqsimtime <- 0

## Prepare the "inner" model ##

# Design matrices
# Amat <- Diagonal(nrow(v7_grid))
# 
# Xmat <- cbind(rep(1,nrow(Amat)))
# 
# design <- bdiag(
#   cbind(
#     Amat,
#     Xmat
#   )
# )

# Response
y <- v7_grid$count + 0.0

## Dimensions
n <- nrow(Xmat) # Number of obs
p <- ncol(Xmat) # Number of betas
m <- ncol(Amat) # Number of spatial points
Wd <- ncol(design) # Number of total params
# Check
stopifnot(Wd == m + p)

## Prior distributions ##
# Use the same prior for both sets of Matern params
sigma_u <- 1.5
sigma_alpha <- .5
rho_u <- 400
rho_alpha <- .95

# PC Prior for kappa,tau
maternconstants <- list()
maternconstants$d <- 2 # Dimension of spatial field, fixed
maternconstants$nu <- 1 # Shape param, fixed
get_kappa <- function(sigma,rho) sqrt(8*maternconstants$nu)/rho
get_tau <- function(sigma,rho) sigma * get_kappa(sigma,rho)^(maternconstants$nu) * sqrt(gamma(maternconstants$nu + maternconstants$d/2) * (4*pi)^(maternconstants$d/2) / gamma(maternconstants$nu))
get_sigma <- function(kappa,tau) tau / (kappa^(maternconstants$nu) * sqrt(gamma(maternconstants$nu + maternconstants$d/2) * (4*pi)^(maternconstants$d/2) / gamma(maternconstants$nu)))
get_rho <- function(kappa,tau) sqrt(8*maternconstants$nu) / kappa

# Precision for betas

beta_prec <- 1

## Log Posterior ----

startingsig <- 1.5
startingrho <- 400
datlist <- list(
  y = y,
  nu = maternconstants$nu,
  rho_u = rho_u,
  rho_alpha = rho_alpha,
  sigma_u = sigma_u,
  sigma_alpha = sigma_alpha,
  D = st_distance(st_centroid(v7_grid), by_element = FALSE),
  A = 4300^2/2500,
  betaprec = beta_prec
)
# NOTE: for some initial values of W, TMB's inner optimization seems to fail
# This was tried over a bunch of random intializations and most worked, and all
# gave the same optimum. But this is why we set the seed here and use a random start.
set.seed(2345)
paraminit <- list(
  W = rnorm(2501),
  logkappa = log(get_kappa(startingsig,startingrho)),
  logtau = log(get_tau(startingsig,startingrho))
)

ff <- MakeADFun(data = datlist,
                parameters = paraminit,
                random = "W",
                DLL = "LGCP_no_cov",
                ADreport = FALSE,
                silent = TRUE)

if (doaghq) {
  tm <- Sys.time()
  cat("Doing AGHQ, time = ",format(tm),"\n")
  LGCP_fit <- aghq::marginal_laplace_tmb(
    ff,
    3,
    startingvalue = c(paraminit$logkappa,paraminit$logtau)
  )
  aghqtime <- difftime(Sys.time(),tm,units = 'secs')
  save(LGCP_fit,file = file.path(savepath,paste0("LGCP_no_cov",savestamp,".RData")))
  cat("AGHQ took: ",format(aghqtime),"\n")
}

LGCP_postsamples <- sample_marginal(LGCP_fit,200)
# Extract out the U and V
postU <- LGCP_postsamples$samps[c(1:2500), ]

theta1 <- LGCP_postsamples$theta$theta1
theta2 <- LGCP_postsamples$theta$theta2

mean(get_sigma(exp(theta1),exp(theta2)))
mean(get_rho(exp(theta1),exp(theta2)))

meanU <-rowMeans(exp(postU))

v7_grid$mean <- meanU

v7_df <- as.data.frame(v7_grid)

plot(v7_grid['mean'])

ggplot(v7_grid) + geom_sf(aes(fill = mean)) + scale_fill_viridis() + theme(panel.grid = element_blank())

